/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/cockroachdb/pypebble/pkg/bindings */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 13 "pebble.go"

#include <stdint.h> // for uintptr_t

typedef const char cchar_t;

typedef struct {
	uintptr_t handle;
	const char* errMsg;
} PebbleOpenResult;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void ReleaseHandle(uintptr_t ptr);
extern uintptr_t PebbleBasicOptions();
extern uintptr_t PebbleCockroachAdjacentOptions();
extern uintptr_t PebbleOptions(GoInt l0CompactionThreshold, GoInt l0StopWritesThreshold, GoInt64 lBaseMaxBytes, GoInt levels, GoInt maxConcurrentCompactions, GoInt memTableSize, GoInt memTableStopWritesThreshold, GoUint64 formatVersion, GoInt blockSize, GoInt indexBlockSize);
extern PebbleOpenResult PebbleOpen(cchar_t* name, uintptr_t optsPtr);
extern cchar_t* PebbleClose(uintptr_t dbPtr);
extern cchar_t* PebbleSet(uintptr_t dbPtr, void* keyBytes, int keyLen, void* valBytes, int valLen, GoUint8 sync);

/* Return type for PebbleGet */
struct PebbleGet_return {
	void* r0;
	GoInt r1;
	cchar_t* r2;
};
extern struct PebbleGet_return PebbleGet(uintptr_t dbPtr, void* keyBytes, int keyLen);
extern GoInt64 PebbleNumFiles(uintptr_t dbPtr);

#ifdef __cplusplus
}
#endif
